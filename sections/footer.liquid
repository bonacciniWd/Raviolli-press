
  {%- style -%}
  body {
    display: grid;
    grid-template-rows: 1fr 10rem auto;
    grid-template-areas: "main" "." "footer";
    overflow-x: hidden;
    background: #F5F7FA;
    min-height: 60vh;
    font-family: 'Open Sans', sans-serif;
  }
  .raviolli-footer .bubbles {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1rem;
    background: var(--footer-background);
    filter: url("#blob");
    overflow: hidden;
  }
  .raviolli-footer .bubble {
    position: absolute;
    left: var(--position, 50%);
    background: var(--footer-background);
    border-radius: 100%;
    animation: bubble-size var(--time, 4s) ease-in infinite var(--delay, 0s),
               bubble-move var(--time, 4s) ease-in infinite var(--delay, 0s);
    transform: translate(-50%, 100%);
  }
  .raviolli-footer .content {
    z-index: 2;
    display: grid;
    grid-template-columns: 1fr auto;
    grid-gap: 4rem;
    padding: 2rem;
    background: var(--footer-background);
  }
  .raviolli-footer a,
  .raviolli-footer p {
    color: #F5F7FA;
    text-decoration: none;
  }
  .raviolli-footer b {
    color: white;
  }
  .raviolli-footer p {
    margin: 0;
    font-size: .75rem;
  }
  .raviolli-footer > .content > div {
    display: flex;
    flex-direction: column;
    justify-content: center;
  }
  .raviolli-footer > .content > div > div {
    margin: 0.25rem 0;
  }
  .raviolli-footer > .content > div > div > * {
    margin-right: .5rem;
  }
  .raviolli-footer .image {
    align-self: center;
    width: 4rem;
    height: 4rem;
    margin: 0.25rem 0;
    background-size: cover;
    background-position: center;
  }
  @keyframes bubble-size {
    0%, 75% {
      width: var(--size, 4rem);
      height: var(--size, 4rem);
    }
    100% {
      width: 0rem;
      height: 0rem;
    }
  }
  @keyframes bubble-move {
    0% {
      bottom: -4rem;
    }
    100% {
      bottom: var(--distance, 10rem);
    }
  }
  {%- endstyle -%}

  <div class="bubbles"></div>

  <div class="content">
    <div>
      <div>
        <b>Eldew</b>
        <a href="#">Secuce</a>
        <a href="#">Drupand</a>
        <a href="#">Oceash</a>
        <a href="#">Ugefe</a>
        <a href="#">Babed</a>
      </div>
      <div>
        <b>Spotha</b>
        <a href="#">Miskasa</a>
        <a href="#">Agithe</a>
        <a href="#">Scesha</a>
        <a href="#">Lulle</a>
      </div>
      <div>
        <b>Chashakib</b>
        <a href="#">Chogauw</a>
        <a href="#">Phachuled</a>
        <a href="#">Tiebeft</a>
        <a href="#">Ocid</a>
        <a href="#">Izom</a>
        <a href="#">Ort</a>
      </div>
      <div>
        <b>Athod</b>
        <a href="#">Pamuz</a>
        <a href="#">Vapert</a>
        <a href="#">Neesk</a>
        <a href="#">Omemanen</a>
      </div>
    </div>
    <div>
      <a class="image" href="https://codepen.io/z-" target="_blank" style="background-image:url('https://s3-us-west-2.amazonaws.com/s.cdpn.io/199011/happy.svg')"></a>
      <p>Â©2019 Not Really</p>
    </div>
  </div>

  <svg style="position:fixed; top:100vh;">
    <defs>
      <filter id="blob">
        <feGaussianBlur in="SourceGraphic" stdDeviation="10" result="blur" />
        <feColorMatrix in="blur" mode="matrix"
          values="1 0 0 0 0  
                  0 1 0 0 0  
                  0 0 1 0 0  
                  0 0 0 19 -9" 
          result="blob" />
      </filter>
    </defs>
  </svg>

  <script>
  document.addEventListener('DOMContentLoaded', () => {
    const bubblesContainer = document.querySelector('#footer .bubbles');
    if (bubblesContainer) {
      const count = 128;
      for (let i = 0; i < count; i++) {
        const bubble = document.createElement('div');
        bubble.classList.add('bubble');
        const size = 2 + Math.random() * 4;
        const distance = 6 + Math.random() * 4;
        const position = -5 + Math.random() * 110;
        const time = 2 + Math.random() * 2;
        const delay = -1 * (2 + Math.random() * 2);
        bubble.style.setProperty('--size', `${size}rem`);
        bubble.style.setProperty('--distance', `${distance}rem`);
        bubble.style.setProperty('--position', `${position}%`);
        bubble.style.setProperty('--time', `${time}s`);
        bubble.style.setProperty('--delay', `${delay}s`);
        bubblesContainer.appendChild(bubble);
      }
    }
  });
  </script>
