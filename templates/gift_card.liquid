{% layout none %}

<!doctype html>
<html lang="{{ request.locale.iso_code }}">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>Gift Card - {{ shop.name }}</title>
    
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      
      body {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        padding: 20px;
      }
      
      .scratch-container {
        position: relative;
        width: 100%;
        max-width: 500px;
        margin-bottom: 30px;
      }
      
      .scratch-card {
        position: relative;
        width: 100%;
        height: 300px;
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0 20px 40px rgba(0,0,0,0.3);
        background: white;
      }
      
      .gift-card-content {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: white;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 40px 20px;
        text-align: center;
        z-index: 1;
        opacity: 0;
        transition: opacity 0.3s ease;
      }
      
      .gift-card-content.revealed {
        opacity: 1;
      }
      
      .gift-card-value {
        font-size: 48px;
        font-weight: bold;
        color: #2c5530;
        margin-bottom: 20px;
      }
      
      .gift-card-code {
        font-family: 'Courier New', monospace;
        font-size: 18px;
        background: #f8f9fa;
        padding: 10px 20px;
        border-radius: 10px;
        border: 2px dashed #dee2e6;
        margin-bottom: 15px;
      }
      
      .gift-card-info {
        color: #6c757d;
        font-size: 14px;
        margin-bottom: 10px;
      }
      
      .scratch-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 2;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: grab;
      }
      
      .scratch-overlay:active {
        cursor: grabbing;
      }
      
      .scratch-overlay::before {
        content: 'üéÅ Arraste para revelar!';
        font-size: 24px;
        font-weight: bold;
        color: white;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
        background: rgba(0,0,0,0.5);
        padding: 15px 25px;
        border-radius: 50px;
        backdrop-filter: blur(10px);
      }
      
      .scratch-canvas {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 3;
        cursor: grab;
        touch-action: none;
      }
      
      .scratch-canvas:active {
        cursor: grabbing;
      }
      
      .instructions {
        color: white;
        font-size: 18px;
        font-weight: 600;
        text-align: center;
        margin-bottom: 20px;
      }
      
      .buttons {
        display: flex;
        gap: 15px;
        flex-wrap: wrap;
        justify-content: center;
      }
      
      .btn {
        padding: 12px 24px;
        border: none;
        border-radius: 25px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
      }
      
      .btn-primary {
        background: #dc2626;
        color: white;
      }
      
      .btn-primary:hover {
        background: #b91c1c;
        transform: translateY(-2px);
      }
      
      .btn-secondary {
        background: white;
        color: #dc2626;
        border: 2px solid #dc2626;
      }
      
      .btn-secondary:hover {
        background: #f8f9fa;
        transform: translateY(-2px);
      }
      
      .hidden {
        display: none !important;
      }
      
      /* Confetti styles */
      .confetti {
        position: fixed;
        width: 10px;
        height: 10px;
        opacity: 0;
        pointer-events: none;
        z-index: 1000;
      }
      
      /* Loading state para a imagem */
      .scratch-overlay.loading {
        background: linear-gradient(45deg, #ff6b6b, #ffd93d, #6bcf7f, #4d96ff);
        background-size: 400% 400%;
        animation: gradientShift 3s ease infinite;
      }
      
      .scratch-overlay.loaded {
        background: url('{{ "gift.jpg" | asset_url }}') center/cover no-repeat;
      }
      
      @keyframes gradientShift {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
      }
      
      @keyframes confettiFall {
        0% {
          transform: translateY(0) rotate(0deg);
          opacity: 1;
        }
        100% {
          transform: translateY(100vh) rotate(360deg);
          opacity: 0;
        }
      }
    </style>
  </head>

  <body>
    <div class="instructions" id="instructions">üéÅ Arraste sobre o cart√£o para revelar o valor!</div>
    
    <div class="scratch-container">
      <div class="scratch-card">
        <!-- Conte√∫do do Gift Card -->
        <div class="gift-card-content" id="giftCardContent">
          <div class="gift-card-value">
            {% if settings.currency_code_enabled %}
              {{ gift_card.balance | money_with_currency }}
            {% else %}
              {{ gift_card.balance | money }}
            {% endif %}
          </div>
          
          <div class="gift-card-code" id="gift-card-code">
            {{ gift_card.code | format_code }}
          </div>

          {% if gift_card.expires_on %}
            {%- assign gift_card_expiration_date = gift_card.expires_on | date: '%B %e, %Y' -%}
            <div class="gift-card-info">
              {{ 'gift_cards.issued.expiration_date' | t: expires_on: gift_card_expiration_date }}
            </div>
          {% endif %}

          <div class="gift-card-info">
            {{ 'gift_cards.issued.how_to_use_gift_card' | t }}
          </div>
        </div>
        
        <!-- Overlay da raspadinha com imagem -->
        <div class="scratch-overlay loading" id="scratchOverlay"></div>
        
        <!-- Canvas para raspadinha -->
        <canvas class="scratch-canvas" id="scratchCanvas"></canvas>
      </div>
    </div>

    <div class="buttons">
      <button class="btn btn-primary" id="copyBtn">
        {{ 'gift_cards.issued.copy_code' | t }}
      </button>
      <a href="{{ shop.url }}" class="btn btn-secondary" target="_blank">
        {{ 'gift_cards.issued.shop_link' | t }}
      </a>
    </div>

    <script>
      // Elementos
      const canvas = document.getElementById('scratchCanvas');
      const ctx = canvas.getContext('2d');
      const scratchOverlay = document.getElementById('scratchOverlay');
      const giftCardContent = document.getElementById('giftCardContent');
      const instructions = document.getElementById('instructions');
      const copyBtn = document.getElementById('copyBtn');
      
      // Vari√°veis de estado
      let isDrawing = false;
      let lastX = 0;
      let lastY = 0;
      let revealed = false;
      let imageLoaded = false;
      
      // Carregar imagem de fundo
      function loadScratchImage() {
        const img = new Image();
        img.crossOrigin = 'anonymous';
        img.src = '{{ "gift.jpg" | asset_url }}';
        
        img.onload = function() {
          imageLoaded = true;
          scratchOverlay.classList.remove('loading');
          scratchOverlay.classList.add('loaded');
          scratchOverlay.style.backgroundImage = `url('${img.src}')`;
        };
        
        img.onerror = function() {
          // Fallback se a imagem n√£o carregar
          imageLoaded = true;
          scratchOverlay.classList.remove('loading');
          scratchOverlay.style.background = 'linear-gradient(45deg, #ff6b6b, #ffd93d, #6bcf7f, #4d96ff)';
          scratchOverlay.style.backgroundSize = '400% 400%';
        };
      }
      
      // Configurar canvas - AGORA COME√áA OPACO
      function setupCanvas() {
        const rect = canvas.getBoundingClientRect();
        canvas.width = rect.width;
        canvas.height = rect.height;
        
        // IMPORTANTE: Preencher com branco opaco inicialmente
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // Configurar estilo do pincel para "raspar"
        ctx.globalCompositeOperation = 'destination-out';
        ctx.lineJoin = 'round';
        ctx.lineCap = 'round';
        ctx.lineWidth = 40;
        ctx.strokeStyle = 'rgba(0,0,0,1)';
      }
      
      // Inicializar
      function init() {
        setupCanvas();
        loadScratchImage();
        
        // Esconder conte√∫do do gift card inicialmente
        giftCardContent.style.opacity = '0';
      }
      
      init();
      window.addEventListener('resize', setupCanvas);
      
      // Fun√ß√µes de desenho
      function startDrawing(e) {
        if (!imageLoaded || revealed) return;
        
        isDrawing = true;
        const pos = getPosition(e);
        [lastX, lastY] = [pos.x, pos.y];
        
        // Come√ßar a desenhar imediatamente no ponto inicial
        ctx.beginPath();
        ctx.arc(lastX, lastY, ctx.lineWidth / 2, 0, Math.PI * 2);
        ctx.fill();
      }
      
      function draw(e) {
        if (!isDrawing || !imageLoaded || revealed) return;
        
        const pos = getPosition(e);
        
        ctx.beginPath();
        ctx.moveTo(lastX, lastY);
        ctx.lineTo(pos.x, pos.y);
        ctx.stroke();
        
        [lastX, lastY] = [pos.x, pos.y];
        
        checkRevealed();
      }
      
      function stopDrawing() {
        isDrawing = false;
      }
      
      // Obter posi√ß√£o do mouse/toque
      function getPosition(e) {
        const rect = canvas.getBoundingClientRect();
        let clientX, clientY;
        
        if (e.type.includes('touch')) {
          clientX = e.touches[0].clientX;
          clientY = e.touches[0].clientY;
        } else {
          clientX = e.clientX;
          clientY = e.clientY;
        }
        
        return {
          x: clientX - rect.left,
          y: clientY - rect.top
        };
      }
      
      // Verificar se foi revelado o suficiente
      function checkRevealed() {
        if (revealed) return;
        
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const pixels = imageData.data;
        let transparentCount = 0;
        let totalPixels = pixels.length / 4; // Cada pixel tem 4 valores (RGBA)
        
        for (let i = 3; i < pixels.length; i += 4) {
          if (pixels[i] < 10) { // Alpha pr√≥ximo de 0 (transparente)
            transparentCount++;
          }
        }
        
        const percent = (transparentCount / totalPixels) * 100;
        
        console.log(`√Årea revelada: ${percent.toFixed(2)}%`); // Debug
        
        if (percent > 40) { // 40% revelado
          revealed = true;
          completeReveal();
        }
      }
      
      // Completar a revela√ß√£o
      function completeReveal() {
        // Mostrar conte√∫do do gift card
        giftCardContent.classList.add('revealed');
        giftCardContent.style.opacity = '1';
        
        // Esconder overlay
        scratchOverlay.style.opacity = '0';
        scratchOverlay.style.pointerEvents = 'none';
        
        // Atualizar instru√ß√µes
        instructions.textContent = 'üéâ Parab√©ns! Cart√£o revelado!';
        
        // Criar confetti
        createConfetti();
        
        // Remover event listeners do canvas
        canvas.style.pointerEvents = 'none';
      }
      
      // Criar efeito de confetti
      function createConfetti() {
        const colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff'];
        
        for (let i = 0; i < 50; i++) {
          setTimeout(() => {
            const confetti = document.createElement('div');
            confetti.className = 'confetti';
            confetti.style.left = Math.random() * 100 + 'vw';
            confetti.style.top = '-10px';
            confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
            confetti.style.width = Math.random() * 10 + 5 + 'px';
            confetti.style.height = Math.random() * 10 + 5 + 'px';
            confetti.style.borderRadius = Math.random() > 0.5 ? '50%' : '0';
            confetti.style.animation = `confettiFall ${Math.random() * 2 + 1}s linear forwards`;
            
            document.body.appendChild(confetti);
            
            // Remover ap√≥s anima√ß√£o
            setTimeout(() => {
              if (confetti.parentNode) {
                confetti.remove();
              }
            }, 3000);
          }, i * 100);
        }
      }
      
      // Event listeners para mouse
      canvas.addEventListener('mousedown', startDrawing);
      canvas.addEventListener('mousemove', draw);
      canvas.addEventListener('mouseup', stopDrawing);
      canvas.addEventListener('mouseout', stopDrawing);
      
      // Event listeners para touch
      canvas.addEventListener('touchstart', (e) => {
        e.preventDefault();
        startDrawing(e);
      });
      
      canvas.addEventListener('touchmove', (e) => {
        e.preventDefault();
        draw(e);
      });
      
      canvas.addEventListener('touchend', stopDrawing);
      
      // Copiar c√≥digo do gift card
      copyBtn.addEventListener('click', () => {
        const code = document.getElementById('gift-card-code').textContent;
        
        // Usar Clipboard API moderna
        if (navigator.clipboard && navigator.clipboard.writeText) {
          navigator.clipboard.writeText(code).then(() => {
            showCopyFeedback();
          }).catch(() => {
            useFallbackCopy(code);
          });
        } else {
          useFallbackCopy(code);
        }
      });
      
      function showCopyFeedback() {
        const originalText = copyBtn.textContent;
        copyBtn.textContent = 'üìã Copiado!';
        copyBtn.style.background = '#10b981';
        
        setTimeout(() => {
          copyBtn.textContent = originalText;
          copyBtn.style.background = '';
        }, 2000);
      }
      
      function useFallbackCopy(text) {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.opacity = '0';
        document.body.appendChild(textArea);
        textArea.select();
        
        try {
          document.execCommand('copy');
          showCopyFeedback();
        } catch (err) {
          console.error('Falha ao copiar texto: ', err);
        }
        
        document.body.removeChild(textArea);
      }
    </script>
  </body>
</html>