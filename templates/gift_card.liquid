{% layout none %}

<!doctype html>
<html lang="{{ request.locale.iso_code }}">
  <head>
    <script src="{{ 'vendor/qrcode.js' | shopify_asset_url }}" defer></script>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="theme-color" content="{{ settings.color_background }}">
    <link rel="canonical" href="{{ canonical_url }}">

    {%- if settings.favicon != blank -%}
      <link rel="icon" type="image/png" href="{{ settings.favicon | image_url: width: 32, height: 32 }}">
    {%- endif -%}

    {%- assign formatted_balance = gift_card.balance | money_without_trailing_zeros | strip_html -%}

    <title>{{ 'gift_cards.issued.title' | t: value: formatted_balance, shop: shop.name }}</title>

    <meta name="description" content="{{ 'gift_cards.issued.subtext' | t }}">

    {{ content_for_header }}

    <style>
      /* Scratch Card Styles */
      body {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        row-gap: 2em;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        margin: 0;
        padding: 20px;
      }

      .scratch-card-container {
        position: relative;
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0 20px 40px rgba(0,0,0,0.3);
        max-width: 500px;
        width: 100%;
      }

      .scratch-card {
        position: relative;
        width: 100%;
        height: 300px;
        background: white;
      }

      .scratch-card-cover-container {
        position: absolute;
        z-index: 2;
        top: 0;
        left: 0;
        border-radius: 20px;
        width: 100%;
        height: 100%;
        filter: url('#remove-black');
        transition: opacity 0.5s ease;
      }

      .scratch-card-cover-container.clear {
        opacity: 0;
        pointer-events: none;
      }

      .scratch-card-canvas {
        position: absolute;
        z-index: 3;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        cursor: grab;
        touch-action: none;
      }

      .scratch-card-canvas:active {
        cursor: grabbing;
      }

      .scratch-card-cover {
        display: flex;
        justify-content: center;
        align-items: center;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(45deg, #ff6b6b, #ffd93d, #6bcf7f, #4d96ff);
        background-size: 400% 400%;
        animation: gradientShift 3s ease infinite;
      }

      @keyframes gradientShift {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
      }

      .scratch-card-cover::before {
        content: 'üéÅ Arraste para revelar o valor!';
        font-size: 24px;
        font-weight: bold;
        color: white;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        text-align: center;
        padding: 20px;
      }

      .gift-card-content {
        position: relative;
        z-index: 1;
        padding: 40px 20px;
        text-align: center;
        background: white;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
      }

      .gift-card-value {
        font-size: 48px;
        font-weight: bold;
        color: #2c5530;
        margin-bottom: 20px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
      }

      .gift-card-code {
        font-family: 'Courier New', monospace;
        font-size: 18px;
        background: #f8f9fa;
        padding: 10px 20px;
        border-radius: 10px;
        border: 2px dashed #dee2e6;
        margin-bottom: 20px;
      }

      .gift-card-instructions {
        color: #6c757d;
        font-size: 14px;
        margin-top: 10px;
      }

      .scratch-card-text {
        font-size: 18px;
        color: white;
        text-align: center;
        margin-top: 20px;
        font-weight: 600;
      }

      .gift-card-buttons {
        display: flex;
        gap: 15px;
        margin-top: 30px;
        flex-wrap: wrap;
        justify-content: center;
      }

      .gift-card-button {
        padding: 12px 24px;
        border: none;
        border-radius: 25px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
      }

      .button-primary {
        background: #dc2626;
        color: white;
      }

      .button-primary:hover {
        background: #b91c1c;
        transform: translateY(-2px);
      }

      .button-secondary {
        background: white;
        color: #dc2626;
        border: 2px solid #dc2626;
      }

      .button-secondary:hover {
        background: #f8f9fa;
        transform: translateY(-2px);
      }

      /* Confetti animation */
      @keyframes confetti-fall {
        0% { transform: translateY(-100px) rotate(0deg); opacity: 1; }
        100% { transform: translateY(100vh) rotate(360deg); opacity: 0; }
      }

      .confetti {
        position: fixed;
        width: 10px;
        height: 10px;
        background: #ff0000;
        opacity: 0;
        pointer-events: none;
      }

      /* Hidden SVG filters */
      svg {
        position: absolute;
        width: 0;
        height: 0;
      }
    </style>
  </head>

  <body>
    <svg width="0" height="0">
      <filter id="remove-black" color-interpolation-filters="sRGB">
        <feColorMatrix
          type="matrix"
          values="1 0 0 0 0
                  0 1 0 0 0
                  0 0 1 0 0
                  -1 -1 -1 0 1"
          result="black-pixels"
        />
        <feComposite in="SourceGraphic" in2="black-pixels" operator="out" />
      </filter>
    </svg>

    <div class="scratch-card-container">
      <div class="scratch-card">
        <div class="gift-card-content">
          <div class="gift-card-value">
            {% if settings.currency_code_enabled %}
              {{ gift_card.balance | money_with_currency }}
            {% else %}
              {{ gift_card.balance | money }}
            {% endif %}
          </div>
          
          <div class="gift-card-code" id="gift-card-code">
            {{ gift_card.code | format_code }}
          </div>

          {% if gift_card.expires_on %}
            {%- assign gift_card_expiration_date = gift_card.expires_on | date: '%B %e, %Y' -%}
            <div class="gift-card-instructions">
              {{ 'gift_cards.issued.expiration_date' | t: expires_on: gift_card_expiration_date }}
            </div>
          {% endif %}

          <div class="gift-card-instructions">
            {{ 'gift_cards.issued.how_to_use_gift_card' | t }}
          </div>

          <div class="gift-card-buttons">
            <button class="gift-card-button button-primary" id="copy-button">
              {{ 'gift_cards.issued.copy_code' | t }}
            </button>
            <a href="{{ shop.url }}" class="gift-card-button button-secondary" target="_blank">
              {{ 'gift_cards.issued.shop_link' | t }}
            </a>
          </div>
        </div>

        <div class="scratch-card-cover-container" id="scratch-cover">
          <canvas class="scratch-card-canvas" id="scratch-canvas"></canvas>
          <div class="scratch-card-cover"></div>
        </div>
      </div>
    </div>

    <div class="scratch-card-text" id="scratch-text">üéÅ Arraste sobre o cart√£o para revelar o valor!</div>

    <script>
      // Canvas setup
      const canvas = document.getElementById('scratch-canvas');
      const ctx = canvas.getContext('2d');
      const coverContainer = document.getElementById('scratch-cover');
      const scratchText = document.getElementById('scratch-text');
      const copyButton = document.getElementById('copy-button');
      
      let isScratching = false;
      let lastX, lastY;
      let revealed = false;

      // Set canvas size
      function resizeCanvas() {
        const rect = canvas.getBoundingClientRect();
        canvas.width = rect.width;
        canvas.height = rect.height;
        
        // Fill with black (scratchable area)
        ctx.fillStyle = '#000000';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
      }

      // Initialize
      resizeCanvas();
      window.addEventListener('resize', resizeCanvas);

      // Scratch functions
      function getMousePos(e) {
        const rect = canvas.getBoundingClientRect();
        return {
          x: e.clientX - rect.left,
          y: e.clientY - rect.top
        };
      }

      function getTouchPos(e) {
        const rect = canvas.getBoundingClientRect();
        const touch = e.touches[0];
        return {
          x: touch.clientX - rect.left,
          y: touch.clientY - rect.top
        };
      }

      function drawLine(x1, y1, x2, y2) {
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.strokeStyle = 'transparent';
        ctx.lineCap = 'round';
        ctx.lineWidth = 40;
        ctx.globalCompositeOperation = 'destination-out';
        ctx.stroke();
      }

      function checkRevealed() {
        if (revealed) return;

        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const pixels = imageData.data;
        let transparentPixels = 0;

        for (let i = 0; i < pixels.length; i += 4) {
          if (pixels[i + 3] === 0) {
            transparentPixels++;
          }
        }

        const transparentPercent = (transparentPixels / (pixels.length / 4)) * 100;
        
        if (transparentPercent > 50) {
          revealed = true;
          coverContainer.classList.add('clear');
          scratchText.textContent = 'üéâ Parab√©ns! Cart√£o revelado!';
          createConfetti();
        }
      }

      function createConfetti() {
        const colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff'];
        for (let i = 0; i < 100; i++) {
          const confetti = document.createElement('div');
          confetti.className = 'confetti';
          confetti.style.left = Math.random() * 100 + 'vw';
          confetti.style.background = colors[Math.floor(Math.random() * colors.length)];
          confetti.style.animation = `confetti-fall ${Math.random() * 3 + 2}s linear forwards`;
          confetti.style.animationDelay = Math.random() * 2 + 's';
          document.body.appendChild(confetti);
          
          setTimeout(() => {
            confetti.remove();
          }, 5000);
        }
      }

      // Event listeners
      canvas.addEventListener('mousedown', (e) => {
        isScratching = true;
        const pos = getMousePos(e);
        lastX = pos.x;
        lastY = pos.y;
        drawLine(lastX, lastY, lastX, lastY);
      });

      canvas.addEventListener('mousemove', (e) => {
        if (!isScratching) return;
        const pos = getMousePos(e);
        drawLine(lastX, lastY, pos.x, pos.y);
        lastX = pos.x;
        lastY = pos.y;
        checkRevealed();
      });

      canvas.addEventListener('mouseup', () => {
        isScratching = false;
      });

      canvas.addEventListener('mouseleave', () => {
        isScratching = false;
      });

      // Touch events
      canvas.addEventListener('touchstart', (e) => {
        e.preventDefault();
        isScratching = true;
        const pos = getTouchPos(e);
        lastX = pos.x;
        lastY = pos.y;
        drawLine(lastX, lastY, lastX, lastY);
      });

      canvas.addEventListener('touchmove', (e) => {
        e.preventDefault();
        if (!isScratching) return;
        const pos = getTouchPos(e);
        drawLine(lastX, lastY, pos.x, pos.y);
        lastX = pos.x;
        lastY = pos.y;
        checkRevealed();
      });

      canvas.addEventListener('touchend', () => {
        isScratching = false;
      });

      // Copy gift card code
      copyButton.addEventListener('click', () => {
        const code = document.getElementById('gift-card-code').textContent;
        navigator.clipboard.writeText(code).then(() => {
          const originalText = copyButton.textContent;
          copyButton.textContent = 'üìã Copiado!';
          setTimeout(() => {
            copyButton.textContent = originalText;
          }, 2000);
        });
      });
    </script>
  </body>
</html>